18 Jan'19; 10mins


The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0,   F(1) = 1
F(N) = F(N - 1) + F(N - 2), for N > 1.
Given N, calculate F(N).


0 ≤ N ≤ 30

Time Complexity : O(2^n) ====> Can be improvised using memoisation and DP techniques


Logic :
      Following the usual definition of fibonacci and basic recursion.
      
Solution:

    class Solution
    {
      public int fib(int N)
      {
           if(N <= 1)
              return N;
          else
              return fib(N - 1) + fib(N - 2);
      }
  }
  
  
  Alternative Methods and Improvisations :
  
  https://leetcode.com/problems/fibonacci-number/discuss/223199/Java-O(2N)-greater-O(N)-greater-O(logN)
  
  Amazing explantions :)
  
  
  
  
  
  Takeaways :
            Simple problems can be solved in a much better way. ALways look for complexities and not just solutions.
