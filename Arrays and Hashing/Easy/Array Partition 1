15th Jan ; 15 mins 

Given an array of 2n integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), ..., (an, bn)
which makes sum of min(ai, bi) for all i from 1 to n as large as possible.

Input: [1,4,3,2]

Output: 4
Explanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).

n is a positive integer, which is in the range of [1, 10000].
All the integers in the array will be in the range of [-10000, 10000].


Time Complexity : O(n)

Logic : 
      Sort the array in ascending order and pick the min of the two.
      This way there is a chance for bigger numbers to contribute to the sum without losing much.
      
Edge Cases : 
      Integers can be negative; But the same logic applies and hence logic can be generalised.
      
      
Solution :

class Solution {
    public int arrayPairSum(int[] nums) {
        Arrays.sort(nums);
        
        int sum = 0;
        
        for(int i = 0; i < nums.length; i++)
        {
            sum = sum+nums[i];
            i++;
            
        }
        
        return sum;
    }
}


Takeaway :
In problems involving min/max constraints on arrays, always see if sorting the array can bring out a solution
